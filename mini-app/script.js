'use strict';
{
  /* 
    [PROCESS]
    - „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÈò≤Ê≠¢„ÅÆ„Åü„ÇÅ„Å´‰∏ÄÊó¶Èü≥Â£∞„ÅØÂ§ñ„Å´Âá∫„Åï„Å™„ÅÑ: done
    - „Éû„Ç§„ÇØ„ÅÆË®±ÂèØ„ÇíÊúÄÂàù„Å´„ÇÇ„Çâ„ÅÜ: done
    - „Éî„ÉÉ„ÉÅ„ÇíÂãï„Åã„Åó„Åü„Çâ„Éî„ÉÉ„ÉÅ„ÅÆÂÄ§„ÅåÂ§â„Çè„Çã„Çà„ÅÜ„Å´„Åó„Å¶„Åä„ÅèÔºàË®≠ÂÆö„Éú„Çø„É≥„Å®„Åã„ÅÑ„Çâ„Å™„ÅÑÔºâ: done
    - Èå≤Èü≥„Éú„Çø„É≥„ÇíÊäº„Åó„Åü„ÇâÈå≤Èü≥„Åå„ÅØ„Åò„Åæ„Çã: done
    - STOP„Åó„Åü„ÇâÊ≠¢„Åæ„Çã: done
      - Â∞ÜÊù•ÁöÑ„Å´„ÅØ20Áßí„Åê„Çâ„ÅÑ„ÅßÊ≠¢„ÇÅ„Åæ„Åô
    - ÁµÇ„Çè„Å£„Åü„Çâ„ÄÅ„Ç®„É¨„É°„É≥„Éà„Å®„Åó„Å¶sounds„Å´Â±ïÈñã: done
    - Èü≥Ê•Ω„Çí„Åù„Åì„ÅßÁ¢∫Ë™ç„ÄÅÂâäÈô§„ÄÅ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã: done
    - UI„Çí„Å®„Å®„ÅÆ„Åà„Çã: done
    - DONE!

    [FUTURE]
    - Èå≤Èü≥ÁßíÊï∞„ÅÆË°®Á§∫„ÄÅÂà∂ÈôêÊôÇÈñì„ÇÇ
    - „ÄåÈå≤Èü≥‰∏≠„Äç„ÅÆÈõ∞Âõ≤Ê∞ó„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÇíË°®Á§∫„Åô„Çã: done
    - ÂèØËÉΩ„Å†„Å£„Åü„Çâ„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫„Å™„Çì„Åã„ÇÇË°®Á§∫„Åó„Åü„ÅÑ...„Åå...
    - „ÅÇ„Å®Èï∑„Åï„ÇÇÔºÅ
    - „Éì„Ç∏„É•„Ç¢„É©„Ç§„Ç∂„Éº„ÇíÂá∫„Åó„Å¶„ÄÅÈå≤Èü≥„Åß„Åç„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Åü„ÅÑ
    - „Ç§„É≥„Éó„ÉÉ„Éà„ÅÆÁ®ÆÈ°û„ÇíÂ∞ÜÊù•ÁöÑ„Å´ÈÅ∏„Åº„ÅÜ
    - „Éî„ÉÉ„ÉÅ„ÅÆ„Ç™„É≥„Ç™„Éï
  */

  // ÂÖ•Âäõ„ÄÅ„Éú„Çø„É≥Á≥ªÂèñÂæó
  const recBtn = document.getElementById('rec');
  const stopBtn = document.getElementById('stop');
  const pitch = document.getElementById('pitch');
  const soundContainer = document.getElementById('sound-container');
  const permissionBtn = document.getElementById('permission');
  const permissionCloseBtn = document.getElementById('permission-close');

  // „Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç™„Éº„Éá„Ç£„Ç™ÂèñÂæóÊ∫ñÂÇô
  const mic = new Tone.UserMedia();

  // Áä∂ÊÖã
  let micPermission = false;
  let isRecording = false;

  // „Éû„Ç§„ÇØÂàùÂõûÊé•Á∂öË®±ÂèØ„ÄÅÈÄöÂ∏∏Êé•Á∂öË®±ÂèØ
  permissionBtn.addEventListener('click', () => {
    mic
      .open()
      .then(() => {
        console.log('mic open');
        renderPermissionFlag();
        init();
        permissionBtn.disabled = true;
      })
      .catch((e) => console.error('error', e));
  });

  // „Éû„Ç§„ÇØÊé•Á∂öÂàáÊñ≠
  permissionCloseBtn.addEventListener('click', async () => {
    mic.close();
    renderPermissionFlag();

    console.log('mic close');

    permissionBtn.disabled = false;
    permissionCloseBtn.disabled = true;
    recBtn.disabled = true;
    stopBtn.disabled = true;
  });

  // [‚ùî] Áâ©ÁêÜÁöÑ„Å´„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë®±ÂèØ„Çí„ÇÇ„Çâ„ÅÑ„Å™„Åä„ÅôÊñπÊ≥ï„ÇÑ„ÄÅ„ÅÇ„Çâ„Åü„ÇÅ„Å¶ÊãíÂê¶„Åô„ÇãÊñπÊ≥ï„Åå„ÅÇ„Çã„ÅÆ„ÅãÁü•„Çä„Åü„ÅÑ„ÄÇ

  function init() {
    // recorder ÂàùÊúüË®≠ÂÆö
    const recorder = new Tone.Recorder();

    // pitchShift ÂàùÊúüË®≠ÂÆö
    const pitchShift = new Tone.PitchShift({ pitch: pitch.value });

    /* 
    Ëâ≤„ÄÖÊåëÊà¶
   */

    // „Åù„ÅÆ„Åæ„Åæ„ÅÆ„ÇØ„É©„ÉÉ„Ç∑„É•„Åó„ÅüÈü≥
    const crusher = new Tone.BitCrusher(4);
    // „Éá„Ç£„Çπ„Éà„Éº„Ç∑„Éß„É≥Á≥ª
    const cheby = new Tone.Chebyshev(2);
    const dist = new Tone.Distortion(0.4);
    // „Çà„Åè„Çè„Åã„Çâ„Çì
    const shift = new Tone.FrequencyShifter(42);
    const tremolo = new Tone.Tremolo(9, 0.75);
    // „Å¥„Å°„Å¥„Å°„ÅÑ„Å£„Å¶„Åæ„Åô
    const phaser = new Tone.Phaser({
      frequency: 15,
      octaves: 5,
      baseFrequency: 1000,
    });
    const pingPong = new Tone.PingPongDelay('4n', 0.2);
    const autoWah = new Tone.AutoWah(50, 6, -30);
    const autoFilter = new Tone.AutoFilter('4n');

    mic.connect(pitchShift);
    pitchShift.connect(autoWah);
    autoWah.connect(recorder);
    // autoWah.toDestination();

    // Èü≥Ê∫ê„ÇíPitchShift„Å∏„Éë„Çπ
    // mic.connect(pitchShift);

    // Èü≥Ê∫ê + PitchShift „Çí recorder „Å´„Éë„Çπ
    // pitchShift.connect(recorder);

    // üß™ Á¢∫Ë™çÁî®: Èü≥Ê∫ê + PitchShift „Çí „Çπ„Éî„Éº„Ç´„Éº „Å´„Éë„Çπ
    // pitchShift.toDestination();

    recBtn.disabled = false;

    recBtn.addEventListener('click', () => {
      console.log('rec start');
      renderRecordingFlag();

      // „É¨„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„Çπ„Çø„Éº„Éà
      recorder.start();
      recBtn.disabled = true;
      stopBtn.disabled = false;
      recBtn.textContent = 'Recording...';
      recBtn.classList.add('is-recording');
    });

    stopBtn.addEventListener('click', async () => {
      console.log('rec stop');
      renderRecordingFlag();
      recBtn.disabled = false;
      stopBtn.disabled = true;
      permissionCloseBtn.disabled = false;
      recBtn.textContent = 'Record';
      recBtn.classList.remove('is-recording');

      // „É¨„Ç≥„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü„ÄÅÈü≥Â£∞„ÅÆblob„ÅåËøîÂç¥„Åï„Çå„Çã
      const recording = await recorder.stop();
      console.log(recording);

      // Blob„Åã„ÇâÈü≥Â£∞„ÅÆURL„Çí‰ΩúÊàê„Åô„Çã
      const url = window.URL.createObjectURL(recording);

      // ÂÆπÈáè„ÇíË®àÁÆó„Åô„Çã
      const sizeInKB = (recording.size / 1034).toFixed(2);
      const sizeInMB = (sizeInKB / 1034).toFixed(2);
      console.log(sizeInKB + 'kb');
      console.log(sizeInMB + 'mb');

      // Ë¶ÅÁ¥†„ÅÆÂÆπÂô®„Çí‰ΩúÊàê
      const containerElement = document.createElement('div');

      // ÁèæÂú®ÊôÇÂàªÂèñÂæó
      const date = new Date().getTime();
      const dateElement = document.createElement('p');
      dateElement.textContent = date;

      // audio „Å® anchor „ÇíÂõ≤„ÇÄË¶ÅÁ¥†‰ΩúÊàê
      const audioAnchorContainer = document.createElement('div');

      // Èü≥Â£∞„Éó„É¨„Éì„É•„ÉºË¶ÅÁ¥†‰ΩúÊàê
      const audioElement = document.createElement('audio');
      audioElement.setAttribute('controls', '');
      audioElement.src = url;

      // „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„É™„É≥„ÇØ‰ΩúÊàê
      const anchorElement = document.createElement('a');
      anchorElement.download = 'recording.webm';
      anchorElement.href = url;
      anchorElement.textContent = 'DOWNLOAD';

      // ‰Ωú„Å£„ÅüË¶ÅÁ¥†„ÇíÊèèÁîª
      containerElement.appendChild(dateElement);
      audioAnchorContainer.appendChild(audioElement);
      audioAnchorContainer.appendChild(anchorElement);
      containerElement.appendChild(audioAnchorContainer);
      soundContainer.prepend(containerElement);
    });

    // „Éî„ÉÉ„ÉÅ„ÅÆÂÄ§„ÅÆÂ§âÊõ¥
    pitch.addEventListener('input', () => {
      pitchShift.pitch = pitch.value;
    });

    // permission„Åå„Åç„Çå„Åü„Çâ„ÄÅstop„Åô„Çã
  }

  /* 
    [UTILS]
  */

  function renderPermissionFlag() {
    micPermission = !micPermission;
    const element = document.getElementById('permission-flag');
    element.textContent = micPermission;
  }

  function renderRecordingFlag() {
    isRecording = !isRecording;
    const element = document.getElementById('recording-flag');
    element.textContent = isRecording;
  }
}
